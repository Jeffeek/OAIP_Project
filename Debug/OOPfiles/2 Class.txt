Классы

Класс – это ключевое понятие в объектно-ориентированном программировании. Не до конца понимая, что такое класс, невозможно успешно программировать в рамках парадигмы ООП. Данная статья посвящена понятию класса и его базовым элементам, таким как поля, методы и конструкторы.


Когда Вы переходите от процедурных языков (Си, Pascal, Basic) к объектно-ориентированным (C#, Java, C++), первое, что вам нужно сделать – это сломать своё мышление относительно того, что программирование – это написание функций и их последовательный вызов в некоторой главной (main). В рамках ООП вам придётся мыслить более абстрактно и работать с классами, которые являются воплощением объектов реального мира. Казалось бы, почему мыслить в рамках реальных объектов – это значит мыслить более абстрактно?

В программировании, которое изначально было процедурным, переход в объектам – это переход на один уровень абстракции выше. Парадоксально, но новичкам на первых порах довольно сложно перейти к мышлению в рамках реальных объектов при написании кода. Но освоив объектно-ориентированное программирование, вы, несомненно, останетесь довольны, потому что его мощь позволит вам создавать сложные программы значительно быстрее. Мы же со своей стороны постараемся на примерах доходчиво объяснить, что такое класс, и как его использовать. Приступим.

Что такое класс?
В объектно-ориентированном программировании (ООП) – класс это основной элемент, в рамках которого осуществляется конструирование программ. Класс содержит в себе данные и код, который управляет этими данными.

Класс зачастую описывает объект реального мира. Как и реальный объект, класс содержит свой набор параметров и характеристик. Каждый такой параметр называется поле класса (очень похоже на обычные переменные). Также класс способен манипулировать своими характеристиками (полями) с помощью методов класса (похожи на функции в процедурных языках). Рассмотрим такой объект, как автомобиль.

Создание класса
Что имеет автомобиль? В частности, это:

марка;
цвет;
мощность (в л/с);
максимальная скорость (км/ч);
объём бака (л);
расход топлива (л) на 100 км пути.
Напишем класс Car (автомобиль) на C++:

public class Car
{
    private: string brand;
     	     string color;
             int power;
             int maxSpeed;
    	     int volumeOfTank;
    	     double fuelConsumption;
}

Как вы могли заменить класс объявляется так: модификатор доступа, ключевое слово class и имя класса. Тело класса определяется фигурными скобками. Внутри класса объявлены его поля.

Следует понимать, что класс – это каркас, иначе говоря, описание реального объекта. На основе этого “описания” создаются экземпляры реального объекта. Логично предположить, что необходим механизм для присваивания значениям полей характеристик объекта. Для этого существуют конструкторы класса.


Конструктор класса
Конструктор класса – это специальный метод, который вызывается при создании нового объекта и используется для инициализации полей класса значениями, а также для начальных вычислений, если они необходимы. После создания объекта конструктор вызвать нельзя. Кроме того, данный метод никогда не возвращает никакого значения.

Напишем конструктор для инициализации полей в классе Car:

public class Car
{
    private: string brand;
     	     string color;
             int power;
             int maxSpeed;
    	     int volumeOfTank;
    	     double fuelConsumption;

    public:
    Car(string newBrand, string newColor, int newPower, int newMaxSpeed, int newVolumeOfTank, double newFuelConsumption)
    {
        brand = newBrand;
        color = newColor;
        power = newPower;
        maxSpeed = newMaxSpeed;
        volumeOfTank = newVolumeOfTank;
        fuelConsumption = newFuelConsumption
    }
}