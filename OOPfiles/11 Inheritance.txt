Наследование в C++

class A {};              // базовый класс
class B : public A {};   // public наследование
class Z : private A {};  // private наследование
class C : protected A{}  // protected наследование
В C++ существует три типа наследования: public, protected, private. Спецификаторы доступа членов базового класса меняются в потомках следующим образом:

Если класс объявлен как базовый для другого класса со спецификатором доступа public, тогда public члены базового класса доступны как public члены производного класса, protected члены базового класса доступны как protected члены производного класса.
Если класс объявлен как базовый для другого класса со спецификатором доступа protected, тогда public и protected члены базового класса доступны как protected члены производного класса.
Если класс объявлен как базовый для другого класса со спецификатором доступа private, тогда public и protected члены базового класса доступны как private члены производного класса.
Все private-члены классы базового класса недоступны в производном классе при любом типе наследования.
Одним из основных преимуществ наследования является то, что указатель на классы-наследники может быть неявно преобразован в указатель на базовый класс, то есть для примера выше можно написать:

A * pa = new B();
Эта интересная особенность открывает возможность динамической идентификации типа (RTTI).