Защищенные члены класса в С++

Члены класса со спецификацией private являются частными, и не могут быть использованы как извне класса, так и из наследника. Это как бы "личные" атрибуты и методы, которые класс "забирает с собой в могилу".

Если необходимо защитить член класса от доступа извне, но позволить использовать его производным классам, используется другое ключевое слово — protected (защищенный). Если продолжить аналогию, это напоминает семейную ценность, передаваемую по наследству.

Защищенный член подобен частному, за исключением механизма наследования. При наследовании защищенного члена производный класс также имеет к нему доступ. Таким образом, указав специфи­катор доступа protected, можно позволить использовать атрибуты и методы внутри иерархии и запретить доступ к нему извне этой иерархии.

Например:

class Base {
private:
    int _my_precious;
protected:
    int _legacy;
public:
    void show_my_precious()
    {
        cout << _my_precious;
    };
};
class Derived: public Base {
public:
    void print_all()
    {
        cout << _my_precious; //Ошибка! Попытка доступа
                              // к приватному члену предка!
        cout << _legacy; //OK. Защищённый член доступен из класса наследника.
        show_my_precious(); //OK. Доступ к приватному атрибуту осуществляется 
                            // через унаследованный публичный метод предка
    }
};
Класс Derived имеет доступ к _legacy, в то же время как он остаётся недоступным для остальной части программы.

Заметим, что если доступ к приватному члену предка осуществляется через унаследованный от него же публичный или защищённый метод, то проблем с доступом не возникает.