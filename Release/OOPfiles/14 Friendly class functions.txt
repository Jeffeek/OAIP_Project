Дружественные функции класса в С++

Что делать, если вдруг потребуется специально предоставить доступ к закрытым членам из функции, не принадлежащей классу? Для этого следует внутри объявления структуры объявить эту функцию другом (friend) класса.

Объявление friend должно находиться внутри объявления класса, чтобы компилятор в процессе обработки объявления располагал полной информацией о размере и поведении этого типа данных, включая ответ на очень важный вопрос: «Кто получает доступ к моей закрытой реализации?»

Класс сам управляет тем, кому предоставляется доступ к его членам. Нет никакой возможности получить доступ извне, если об этом ничего не сказано в самом классе. Нельзя объявить новый класс или структуру, заявив: «Привет, я являюсь другом структуры Bob», и рассчитывать на получение доступа к закрытым и защищенным членам структуры Bob.

Дружественными могут объявляться глобальные функции, методы других классов и даже классы целиком.

Пример
struct X;
struct Y
{
    void f(X*);
};
struct X
{
private:
    int i;
public:
    void initialize();
    friend void g(X*, int); // Глобальная дружественная функция
    friend void Y::f(X*); // Дружественная функция другой структуры
    friend struct Z; // Дружественной является вся структура
    friend void h();
};
void X::initialize()
{
    i = 0;
}
void g(X* x, int i)
{
    x->i = i;
}
void Y::f(X* x)
{
    x->i = 47;
}
struct Z
{
private:
    int j;
public:
    void initialize();
    void g(X* x);
};
void Z::initialize()
{
    j = 99;
}
void Z::g(X* x)
{
    x->i += j;
}
void h()
{
    X x;
    x.i = 100; // Прямое обращение к данным
}
int main()
{
    X x;
    Z z;
    z.g(&x);
}