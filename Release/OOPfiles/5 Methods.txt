Методы класса

В ООП методы класса схожи по назначению с функциями из процедурного программирования.

Общая схема объявления метода: [модификаторДоступа]: типВозвращаемогоЗначения имяМетода ([аргументы]) { }.

Тип возвращаемого значения может быть void (ничего не возвращает);
Наличие аргументов необязательно.
Создадим метод, который рассчитает на сколько километров пути хватит полного бака бензина:

public:
double QuantityOfKilometers()
{
    double quantity = 100 * volumeOfTank / fuelConsumption;

    return quantity;
}

А также создадим метод с тем же именем, но с параметром – количеством топлива; рассчитаем на сколько километров пути его хватит:

public:
double QuantityOfKilometers()
{
    double quantity = 100 * volumeOfTank / fuelConsumption;
 
    return quantity;
}

Методы с одинаковым именем создавать можно, но они должны иметь разные аргументы (по количеству или типу данных; могут отсутствовать вовсе). Компилятор выберет тот, который подходит при вызове метода по аргументам. Методы с идентичными именами, но разными параметрами, иллюстрируют полиморфизм в ООП.

Вызовем данные методы для нашего Форда и выведем результат выполнения в консоль.

//C++
cout << c.QuantityOfKilometers();
cout << c.QuantityOfKilometers(10);

Что такое класс в ООП - создаём методы

Приведём общую схему вызова метода для экземпляра класса (используется оператор “точка”): имяЭкземпляраКласса.ИмяМетода([аргументы]);

c.QuantityOfKilometers();
c.QuantityOfKilometers(10);

Итак, подводя итоги, отметим, что базовая структура класса в ООП, это (в любом порядке):

поля (данные);
конструктор(ы);
методы.